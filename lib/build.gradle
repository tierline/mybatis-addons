/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
  // Apply the java-library plugin for API and implementation separation.
  id 'java-library'
  id 'maven-publish'
  id 'com.qqviaja.gradle.MybatisGenerator' version '2.5'
  id 'com.diffplug.spotless' version '6.25.0'
  id 'com.github.spotbugs' version '6.0.26'
  id 'pmd'
  id 'checkstyle'
  id 'jacoco'
  id "org.sonarqube" version '5.1.0.4882'
}

group = 'com.tierline'
version = '0.0.1'

jar {
  archiveBaseName = rootProject.name
}

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

publishing {
  publications {
    maven(MavenPublication) {
      artifactId = rootProject.name
      from components.java
    }
  }
}

spotless {
  format 'misc', {
    target '*.gradle', '.gitattributes', '.gitignore'
    indentWithSpaces(2)
    trimTrailingWhitespace()
    endWithNewline()
  }
  java {
    palantirJavaFormat().style("GOOGLE")
  }
}

spotbugs {
  ignoreFailures = false
  showProgress = false
  excludeFilter = file('../config/spotbugs/exclude.xml')
}

checkstyle {
  toolVersion = "10.20.0"
  configProperties = ['org.checkstyle.google.suppressionfilter.config': file('./config/checkstyle/suppressions.xml').absolutePath]
}

jacocoTestReport {
  reports {
    xml.required = false
    csv.required = false
  }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3
    api 'org.mybatis:mybatis:3.5.+'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.10.3')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
